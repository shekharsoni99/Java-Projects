Q1.What is a Process Scheduler ? Discuss about some popular scheduling algorithms.

Ans: A Process Scheduler schedules different processes to be assigned to the CPU based on particular scheduling algorithms. There are some popular process scheduling algorithms which we are going to discuss --

1. First-Come, First-Served (FCFS) Scheduling
2. Shortest-Job-Next (SJN) Scheduling
3. Priority Scheduling
4. Shortest Remaining Time
5. Round Robin(RR) Scheduling
6. Multiple-Level Queues Scheduling

1. First Come First Serve (FCFS)
	a) Jobs are executed on first come, first serve basis.
	b) Its implementation is based on FIFO queue.
	c) Poor in performance as average wait time is high.

2. Shortest Job Next (SJN)
	a) This is also known as shortest job first, or SJF
	b) Best approach to minimize waiting time.
	c) Easy to implement in Batch systems where required CPU time is known in advance.

3. Priority Based Scheduling
	a) Priority scheduling is a non-preemptive algorithm and one of the most common scheduling algorithms in batch systems.
	b) Each process is assigned a priority. Process with highest priority is to be executed first and so on.
	c) Processes with same priority are executed on first come first served basis.
	d) Priority can be decided based on memory requirements, time requirements or any other resource requirement. 


------------------------------------------------------------------------------------------------------------------

Q2. What are the features of the linux operating system?

Ans: Following are some of the important features of Linux Operating System.

1> Portable − Portability means software can works on different types of hardware in same way. Linux kernel and application programs supports their installation on any kind of hardware platform.

2> Open Source − Linux source code is freely available and it is community based development project. Multiple teams work in collaboration to enhance the capability of Linux operating system and it is continuously evolving.

3> Multi-User − Linux is a multiuser system means multiple users can access system resources like memory/ ram/ application programs at same time.

4> Multiprogramming − Linux is a multiprogramming system means multiple applications can run at same time.

5> Hierarchical File System − Linux provides a standard file structure in which system files/ user files are arranged.

6> Shell − Linux provides a special interpreter program which can be used to execute commands of the operating system. It can be used to do various types of operations, call application programs. etc.

7> Security − Linux provides user security using authentication features like password protection/ controlled access to specific files/ encryption of data.


-------------------------------------------------------------------------------------------------------------------------

Q3.What is Kernel and its main function ?


Ans: Kernel − It is the core component of Operating System, interacts directly with hardware, provides low level services to upper layer components.

1> A  Kernel is the central component of an Operating System. The Kernel is also said to be the heart of the Operating System. 

2> It is responsible for managing all the processes, memory, files, etc. 

3> The Kernel functions at the lowest level of the Operating System. 

4> It acts as an interface (bridge) between the user-level application (software) and the hardware. Therefore, the communication between the software and the hardware is done via the Kernel.

The main functions that the Kernel performs are as follows:

	a) Process Management
	b) Memory Management
	c) Device Management
	d) Interrupt Handling
	e) Input Output Communication


------------------------------------------------------------------------------------------------------------

Q4.What is a deadlock in OS? What are the necessary conditions for a deadlock?

Ans: In an operating system, a deadlock occurs when a process or thread enters a waiting state because a requested system resource is held by another waiting process, which in turn is waiting for another resource held by another waiting process. If a process remains indefinitely unable to change its state because resources requested by it are being used by another process that itself is waiting, then the system is said to be in a deadlock.

1> Mutual exclusion: At least one resource must be held in a non-shareable mode; that is, only one process at a time can use the resource. Otherwise, the processes would not be prevented from using the resource when necessary. Only one process can use the resource at any given instant of time.

2> Hold and wait or resource holding: a process is currently holding at least one resource and requesting additional resources which are being held by other processes.

3> No preemption: a resource can be released only voluntarily by the process holding it.

4> Circular wait: each process must be waiting for a resource which is being held by another process, which in turn is waiting for the first process to release the resource. In general, there is a set of waiting processes, P = {P1, P2, …, PN}, such that P1 is waiting for a resource held by P2, P2 is waiting for a resource held by P3 and so on until PN is waiting for a resource held by P1.


---------------------------------------------------------------------------------------------------------------------

Q5.Explain pessimistic and optimistic Locking

Ans: Optimistic Locking is a strategy where you read a record, take note of a version number (other methods to do this involve dates, timestamps or checksums/hashes) and check that the version hasn't changed before you write the record back. When you write the record back you filter the update on the version to make sure it's atomic. (i.e. hasn't been updated between when you check the version and write the record to the disk) and update the version in one hit.
If the record is dirty (i.e. different version to yours) you abort the transaction and the user can restart it.

This strategy is most applicable to high-volume systems and three-tier architectures where you do not necessarily maintain a connection to the database for your session. In this situation the client cannot actually maintain database locks as the connections are taken from a pool and you may not be using the same connection from one access to the next.



Pessimistic Locking is when you lock the record for your exclusive use until you have finished with it.
It has much better integrity than optimistic locking but requires you to be careful with your application design to avoid Deadlocks. To use pessimistic locking you need either a direct connection to the database (as would typically be the case in a __two tier client server__application) or an externally available transaction ID that can be used independently of the connection.
In the latter case you open the transaction with the TxID and then reconnect using that ID.
 The DBMS maintains the locks and allows you to pick the session back up through the TxID. This is how distributed transactions using two-phase commit protocols (such as XA or COM+ Transactions) work.
